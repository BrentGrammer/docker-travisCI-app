
-Set up a repository on GitHub (Note if it is private, you will have to add credentials at various steps in the CI 
flow for things to work)

TRAVIS CI:

-This program watches for any pushes to code on GitHub and then GitHub notifies the program to do some work.   Typically used to run tests and then deploy the app to AWS (
  or whatever host).

1) Go to the travis-ci.org website and signup or signin with GitHub to authorize TravisCI access to your repositories.
2) Tell TravisCI to watch your repo (find it in the list and click the switch next to it.)
-This tells Travis CI that anytime there is a push to that repo, it should pull that code and do some work on it.

*Gotcha in Travis CI script section for running tests:
 -Travis CI assumes that the test suite will exit after finishing but this is not the default behavior by npm run test
 (the test suite hangs and does not exit)
 ** You need to add a -- --coverage command to the npm run test command to make it exit:
      $ npm run test -- --converage

Ex .travis.yaml:

# gives Travis superuser permissions to execute a docker build (required)
sudo: required
# tell Travis a copy of docker is needed:
services:
  - docker

# this is a series of commands executed before the tests are run:
# this is a series of steps of operations to run either before running tests or deploying a project
# use it to build the Docker image to use for testing
# tag the image with your docker username/nameOfRepo with -t to refer to it
before_install:
  - docker build -t brentgrammer/docker-travisCI-app -f Dockerfile.dev .

# script section contains all commands to be executed to run the test suite:
# If any of the commands result in a status of other than 0, Travis assumes the build or test suite failed.
script: 
  - docker run brentgrammer/docker-travisCI-app npm run test -- --coverage

